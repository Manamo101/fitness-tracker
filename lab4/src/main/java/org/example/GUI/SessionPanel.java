package org.example.GUI;

import org.example.Logic.ProgramOperation;
import org.w3c.dom.ls.LSOutput;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.TableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class SessionPanel extends JPanel implements TableModelListener, ListSelectionListener {
    private String currentDate;
    private String selectedValue;
    private JScrollPane scrollPane;
    private JTable table;
    private JPanel NorthPanel;
    private JPanel centerPanel;
    private JTextField dataField;
    private JLabel dataLabel;
    private JComboBox<String> comboBox;
    private JComboBox<String> sorting;
    private JButton addButton;
    private JTextField HHMMSSTextField;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        NorthPanel = new JPanel();
        NorthPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        NorthPanel.setFocusTraversalPolicyProvider(true);
        Font NorthPanelFont = this.$$$getFont$$$(null, -1, 14, NorthPanel.getFont());
        if (NorthPanelFont != null) NorthPanel.setFont(NorthPanelFont);
        NorthPanel.setPreferredSize(new Dimension(700, 40));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 14, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("choose session");
        NorthPanel.add(label1);
        comboBox = new JComboBox();
        NorthPanel.add(comboBox);
        dataLabel = new JLabel();
        Font dataLabelFont = this.$$$getFont$$$(null, -1, 14, dataLabel.getFont());
        if (dataLabelFont != null) dataLabel.setFont(dataLabelFont);
        dataLabel.setText("set date");
        NorthPanel.add(dataLabel);
        dataField = new JTextField();
        dataField.setPreferredSize(new Dimension(100, 30));
        dataField.setText("YYYY-MM-DD");
        dataField.setToolTipText("YYYY-MM-DD");
        NorthPanel.add(dataField);
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, -1, 14, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("time");
        label2.setToolTipText("");
        NorthPanel.add(label2);
        HHMMSSTextField = new JTextField();
        HHMMSSTextField.setPreferredSize(new Dimension(80, 30));
        HHMMSSTextField.setText("HH:MM:SS");
        HHMMSSTextField.setToolTipText("HH:MM:SS");
        NorthPanel.add(HHMMSSTextField);
        addButton = new JButton();
        addButton.setText("add");
        NorthPanel.add(addButton);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return NorthPanel;
    }

    SessionPanel() {
        this.setLayout(new BorderLayout());
        this.add(NorthPanel, BorderLayout.NORTH);
        comboBox.setModel(new DefaultComboBoxModel<>(ProgramOperation.trainingNames()));
        String[] column = {"training name", "date", "time"};
        String[][] stringArray = ProgramOperation.selectSessions().stream().map(u -> u.toArray(new String[0])).toArray(String[][]::new);
        table = new JTable(stringArray, column);
        table.setCellSelectionEnabled(true);
        table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(this);
        table.getModel().addTableModelListener(this);
        scrollPane = new JScrollPane(table);
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        this.add(scrollPane, BorderLayout.CENTER);
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        //String changedValue;
        int row = e.getFirstRow();
        int column = e.getColumn();
        TableModel model = (TableModel) e.getSource();
        String columnName = model.getColumnName(column);
        String changedValue = model.getValueAt(row, column).toString();
        System.out.println(columnName);
        System.out.println(selectedValue);
        System.out.println(changedValue);
        System.out.println(currentDate);
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        selectedValue = (String) table.getValueAt(table.getSelectedRow(), table.getSelectedColumn());
        currentDate = (String) table.getValueAt(table.getSelectedRow(), 1);
    }
}
